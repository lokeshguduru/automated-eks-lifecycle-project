name: Deploy EKS, Application, and then Destroy

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - 'k8s-manifests/**'

jobs:
  # Job 1: Deploy the EKS infrastructure
  terraform-deploy:
    name: '1. Terraform Deploy EKS Cluster'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    outputs:
      cluster_name: ${{ steps.eks.outputs.cluster_name }}
      region: ${{ steps.eks.outputs.region }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false

      - name: Get Cluster Name from Terraform Output
        id: eks
        run: |
          echo "cluster_name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT
          echo "region=$(terraform output -raw region)" >> $GITHUB_OUTPUT

  # Job 2: Deploy the 3-Tier Application onto the new cluster
  deploy-application:
    name: '2. Deploy Application with Kubectl'
    runs-on: ubuntu-latest
    needs: terraform-deploy # This job runs only after the cluster is ready

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ needs.terraform-deploy.outputs.region }}

      - name: Configure Kubectl
        run: |
          aws eks --region ${{ needs.terraform-deploy.outputs.region }} update-kubeconfig --name ${{ needs.terraform-deploy.outputs.cluster_name }}
          echo "kubectl configured for cluster: ${{ needs.terraform-deploy.outputs.cluster_name }}"

      - name: Deploy Application Manifests
        run: |
          echo "Applying Kubernetes manifests..."
          # You must install the AWS LBC before applying the ingress
          # For a portfolio project, it's assumed this is done manually during the wait step
          kubectl apply -f k8s-manifests/

      - name: Wait for deployments to be ready
        run: |
          echo "Waiting for deployments to roll out..."
          kubectl wait --for=condition=available --timeout=5m deployment/frontend-deployment
          kubectl wait --for=condition=available --timeout=5m deployment/backend-api-deployment

  # Job 3: Wait for verification and then destroy everything
  wait-and-destroy:
    name: '3. Wait and Destroy'
    runs-on: ubuntu-latest
    needs: deploy-application # This job runs only after the application is deployed

    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Wait for Verification Window
        run: |
          echo "Infrastructure and Application are live. Waiting for 10 minutes for verification."
          echo "To see the app, install the AWS LBC, then run 'kubectl get ingress main-ingress' to get the URL."
          sleep 600 # Waits for 600 seconds (10 minutes)

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ needs.terraform-deploy.outputs.region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        run: |
          echo "Verification window over. Destroying infrastructure..."
          terraform destroy -auto-approve -input=false